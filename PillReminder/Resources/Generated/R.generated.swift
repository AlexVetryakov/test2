//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try font.validate()
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 1 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.color` struct is generated, and contains static references to 19 colors.
  struct color {
    /// Color `AccentColor`.
    static let accentColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "AccentColor")
    /// Color `backgroundError`.
    static let backgroundError = Rswift.ColorResource(bundle: R.hostingBundle, name: "backgroundError")
    /// Color `backgroundPrimary`.
    static let backgroundPrimary = Rswift.ColorResource(bundle: R.hostingBundle, name: "backgroundPrimary")
    /// Color `backgroundSecondary`.
    static let backgroundSecondary = Rswift.ColorResource(bundle: R.hostingBundle, name: "backgroundSecondary")
    /// Color `backgroundSelected`.
    static let backgroundSelected = Rswift.ColorResource(bundle: R.hostingBundle, name: "backgroundSelected")
    /// Color `base`.
    static let base = Rswift.ColorResource(bundle: R.hostingBundle, name: "base")
    /// Color `buttonPrimary10`.
    static let buttonPrimary10 = Rswift.ColorResource(bundle: R.hostingBundle, name: "buttonPrimary10")
    /// Color `buttonPrimary`.
    static let buttonPrimary = Rswift.ColorResource(bundle: R.hostingBundle, name: "buttonPrimary")
    /// Color `buttonSecondary10`.
    static let buttonSecondary10 = Rswift.ColorResource(bundle: R.hostingBundle, name: "buttonSecondary10")
    /// Color `buttonSecondary`.
    static let buttonSecondary = Rswift.ColorResource(bundle: R.hostingBundle, name: "buttonSecondary")
    /// Color `buttonThird`.
    static let buttonThird = Rswift.ColorResource(bundle: R.hostingBundle, name: "buttonThird")
    /// Color `divider`.
    static let divider = Rswift.ColorResource(bundle: R.hostingBundle, name: "divider")
    /// Color `fieldError`.
    static let fieldError = Rswift.ColorResource(bundle: R.hostingBundle, name: "fieldError")
    /// Color `fieldFull`.
    static let fieldFull = Rswift.ColorResource(bundle: R.hostingBundle, name: "fieldFull")
    /// Color `primaryButtonDisableText`.
    static let primaryButtonDisableText = Rswift.ColorResource(bundle: R.hostingBundle, name: "primaryButtonDisableText")
    /// Color `primaryButtonEnableText`.
    static let primaryButtonEnableText = Rswift.ColorResource(bundle: R.hostingBundle, name: "primaryButtonEnableText")
    /// Color `textBlue`.
    static let textBlue = Rswift.ColorResource(bundle: R.hostingBundle, name: "textBlue")
    /// Color `textPrimary`.
    static let textPrimary = Rswift.ColorResource(bundle: R.hostingBundle, name: "textPrimary")
    /// Color `textSecondary`.
    static let textSecondary = Rswift.ColorResource(bundle: R.hostingBundle, name: "textSecondary")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func accentColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.accentColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "backgroundError", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func backgroundError(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.backgroundError, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "backgroundPrimary", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func backgroundPrimary(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.backgroundPrimary, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "backgroundSecondary", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func backgroundSecondary(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.backgroundSecondary, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "backgroundSelected", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func backgroundSelected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.backgroundSelected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "base", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func base(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.base, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "buttonPrimary", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func buttonPrimary(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.buttonPrimary, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "buttonPrimary10", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func buttonPrimary10(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.buttonPrimary10, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "buttonSecondary", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func buttonSecondary(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.buttonSecondary, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "buttonSecondary10", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func buttonSecondary10(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.buttonSecondary10, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "buttonThird", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func buttonThird(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.buttonThird, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "divider", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func divider(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.divider, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "fieldError", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func fieldError(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.fieldError, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "fieldFull", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func fieldFull(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.fieldFull, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "primaryButtonDisableText", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func primaryButtonDisableText(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.primaryButtonDisableText, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "primaryButtonEnableText", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func primaryButtonEnableText(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.primaryButtonEnableText, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "textBlue", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func textBlue(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.textBlue, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "textPrimary", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func textPrimary(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.textPrimary, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "textSecondary", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func textSecondary(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.textSecondary, compatibleWith: traitCollection)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func accentColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.accentColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "backgroundError", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func backgroundError(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.backgroundError.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "backgroundPrimary", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func backgroundPrimary(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.backgroundPrimary.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "backgroundSecondary", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func backgroundSecondary(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.backgroundSecondary.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "backgroundSelected", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func backgroundSelected(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.backgroundSelected.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "base", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func base(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.base.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "buttonPrimary", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func buttonPrimary(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.buttonPrimary.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "buttonPrimary10", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func buttonPrimary10(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.buttonPrimary10.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "buttonSecondary", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func buttonSecondary(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.buttonSecondary.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "buttonSecondary10", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func buttonSecondary10(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.buttonSecondary10.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "buttonThird", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func buttonThird(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.buttonThird.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "divider", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func divider(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.divider.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "fieldError", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func fieldError(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.fieldError.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "fieldFull", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func fieldFull(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.fieldFull.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "primaryButtonDisableText", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func primaryButtonDisableText(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.primaryButtonDisableText.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "primaryButtonEnableText", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func primaryButtonEnableText(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.primaryButtonEnableText.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "textBlue", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func textBlue(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.textBlue.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "textPrimary", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func textPrimary(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.textPrimary.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "textSecondary", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func textSecondary(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.textSecondary.name)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.file` struct is generated, and contains static references to 2 files.
  struct file {
    /// Resource file `OpenSans-Regular.ttf`.
    static let openSansRegularTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "OpenSans-Regular", pathExtension: "ttf")
    /// Resource file `OpenSans-SemiBold.ttf`.
    static let openSansSemiBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "OpenSans-SemiBold", pathExtension: "ttf")

    /// `bundle.url(forResource: "OpenSans-Regular", withExtension: "ttf")`
    static func openSansRegularTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.openSansRegularTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "OpenSans-SemiBold", withExtension: "ttf")`
    static func openSansSemiBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.openSansSemiBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.font` struct is generated, and contains static references to 2 fonts.
  struct font: Rswift.Validatable {
    /// Font `OpenSans-Regular`.
    static let openSansRegular = Rswift.FontResource(fontName: "OpenSans-Regular")
    /// Font `OpenSans-SemiBold`.
    static let openSansSemiBold = Rswift.FontResource(fontName: "OpenSans-SemiBold")

    /// `UIFont(name: "OpenSans-Regular", size: ...)`
    static func openSansRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: openSansRegular, size: size)
    }

    /// `UIFont(name: "OpenSans-SemiBold", size: ...)`
    static func openSansSemiBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: openSansSemiBold, size: size)
    }

    static func validate() throws {
      if R.font.openSansRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'OpenSans-Regular' could not be loaded, is 'OpenSans-Regular.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.openSansSemiBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'OpenSans-SemiBold' could not be loaded, is 'OpenSans-SemiBold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 22 images.
  struct image {
    /// Image `addReminderIcon`.
    static let addReminderIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "addReminderIcon")
    /// Image `arrowDropDownBigIcon`.
    static let arrowDropDownBigIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "arrowDropDownBigIcon")
    /// Image `arrowRight`.
    static let arrowRight = Rswift.ImageResource(bundle: R.hostingBundle, name: "arrowRight")
    /// Image `backIcon`.
    static let backIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "backIcon")
    /// Image `burgerMenuIcon`.
    static let burgerMenuIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "burgerMenuIcon")
    /// Image `capsule`.
    static let capsule = Rswift.ImageResource(bundle: R.hostingBundle, name: "capsule")
    /// Image `check`.
    static let check = Rswift.ImageResource(bundle: R.hostingBundle, name: "check")
    /// Image `close`.
    static let close = Rswift.ImageResource(bundle: R.hostingBundle, name: "close")
    /// Image `confirmed`.
    static let confirmed = Rswift.ImageResource(bundle: R.hostingBundle, name: "confirmed")
    /// Image `drops`.
    static let drops = Rswift.ImageResource(bundle: R.hostingBundle, name: "drops")
    /// Image `gel`.
    static let gel = Rswift.ImageResource(bundle: R.hostingBundle, name: "gel")
    /// Image `inhaler`.
    static let inhaler = Rswift.ImageResource(bundle: R.hostingBundle, name: "inhaler")
    /// Image `injection`.
    static let injection = Rswift.ImageResource(bundle: R.hostingBundle, name: "injection")
    /// Image `minus`.
    static let minus = Rswift.ImageResource(bundle: R.hostingBundle, name: "minus")
    /// Image `pillIcon`.
    static let pillIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "pillIcon")
    /// Image `plus`.
    static let plus = Rswift.ImageResource(bundle: R.hostingBundle, name: "plus")
    /// Image `sachet`.
    static let sachet = Rswift.ImageResource(bundle: R.hostingBundle, name: "sachet")
    /// Image `solution`.
    static let solution = Rswift.ImageResource(bundle: R.hostingBundle, name: "solution")
    /// Image `spray`.
    static let spray = Rswift.ImageResource(bundle: R.hostingBundle, name: "spray")
    /// Image `suppository`.
    static let suppository = Rswift.ImageResource(bundle: R.hostingBundle, name: "suppository")
    /// Image `tablet`.
    static let tablet = Rswift.ImageResource(bundle: R.hostingBundle, name: "tablet")
    /// Image `trash`.
    static let trash = Rswift.ImageResource(bundle: R.hostingBundle, name: "trash")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "addReminderIcon", bundle: ..., traitCollection: ...)`
    static func addReminderIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.addReminderIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "arrowDropDownBigIcon", bundle: ..., traitCollection: ...)`
    static func arrowDropDownBigIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arrowDropDownBigIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "arrowRight", bundle: ..., traitCollection: ...)`
    static func arrowRight(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arrowRight, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "backIcon", bundle: ..., traitCollection: ...)`
    static func backIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.backIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "burgerMenuIcon", bundle: ..., traitCollection: ...)`
    static func burgerMenuIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.burgerMenuIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "capsule", bundle: ..., traitCollection: ...)`
    static func capsule(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.capsule, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "check", bundle: ..., traitCollection: ...)`
    static func check(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.check, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "close", bundle: ..., traitCollection: ...)`
    static func close(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.close, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "confirmed", bundle: ..., traitCollection: ...)`
    static func confirmed(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.confirmed, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "drops", bundle: ..., traitCollection: ...)`
    static func drops(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.drops, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "gel", bundle: ..., traitCollection: ...)`
    static func gel(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gel, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "inhaler", bundle: ..., traitCollection: ...)`
    static func inhaler(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.inhaler, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "injection", bundle: ..., traitCollection: ...)`
    static func injection(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.injection, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "minus", bundle: ..., traitCollection: ...)`
    static func minus(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.minus, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "pillIcon", bundle: ..., traitCollection: ...)`
    static func pillIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pillIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "plus", bundle: ..., traitCollection: ...)`
    static func plus(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.plus, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sachet", bundle: ..., traitCollection: ...)`
    static func sachet(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sachet, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "solution", bundle: ..., traitCollection: ...)`
    static func solution(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.solution, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "spray", bundle: ..., traitCollection: ...)`
    static func spray(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.spray, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "suppository", bundle: ..., traitCollection: ...)`
    static func suppository(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.suppository, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tablet", bundle: ..., traitCollection: ...)`
    static func tablet(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tablet, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "trash", bundle: ..., traitCollection: ...)`
    static func trash(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.trash, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.info` struct is generated, and contains static references to 1 properties.
  struct info {
    struct uiApplicationSceneManifest {
      static let _key = "UIApplicationSceneManifest"
      static let uiApplicationSupportsMultipleScenes = false

      struct uiSceneConfigurations {
        static let _key = "UISceneConfigurations"

        fileprivate init() {}
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  /// This `R.string` struct is generated, and contains static references to 2 localization tables.
  struct string {
    /// This `R.string.launchScreen` struct is generated, and contains static references to 0 localization keys.
    struct launchScreen {
      fileprivate init() {}
    }

    /// This `R.string.localizable` struct is generated, and contains static references to 41 localization keys.
    struct localizable {
      /// Value: Ін'єкція
      static let drugFormInjectionTitle = Rswift.StringResource(key: "drugForm.injection.title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Інгалятор
      static let drugFormInhalerTitle = Rswift.StringResource(key: "drugForm.inhaler.title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Відмінити
      static let commonCancelTitle = Rswift.StringResource(key: "common.cancel.title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Для відправки фотографій потрібний доступ до Вашої бібліотеки фото
      static let pillInfoChangePhotoSubtitle = Rswift.StringResource(key: "pillInfo.changePhoto.subtitle", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Дні тижня
      static let reminderInfoDaysTitle = Rswift.StringResource(key: "reminderInfo.days.title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Днів
      static let reminderInfoDaysPeriodTitle = Rswift.StringResource(key: "reminderInfo.daysPeriod.title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Додати нагадування
      static let reminderListProceedButtonTitle = Rswift.StringResource(key: "reminderList.proceedButton.title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Доступ до Фото
      static let pillInfoChangePhotoTitle = Rswift.StringResource(key: "pillInfo.changePhoto.title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Завантажити фото
      static let pillInfoLoadPhotoButtonTitle = Rswift.StringResource(key: "pillInfo.loadPhotoButton.title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Зробити фото
      static let pillInfoMakePhotoButtonTitle = Rswift.StringResource(key: "pillInfo.makePhotoButton.title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Зробити фото
      static let pillInfoMakePhotoTitle = Rswift.StringResource(key: "pillInfo.makePhoto.title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Капсула
      static let drugFormCapsuleTitle = Rswift.StringResource(key: "drugForm.capsule.title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Краплі
      static let drugFormDropsTitle = Rswift.StringResource(key: "drugForm.drops.title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Кінець
      static let reminderInfoEndPeriodTitle = Rswift.StringResource(key: "reminderInfo.endPeriod.title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Мазь/гель
      static let drugFormGelTitle = Rswift.StringResource(key: "drugForm.gel.title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Налаштування
      static let commonSettingsTitle = Rswift.StringResource(key: "common.settings.title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Оберіть розклад прийому
      static let reminderInfoScheduleTitle = Rswift.StringResource(key: "reminderInfo.schedule.title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Оберіть час
      static let timePickerTitle = Rswift.StringResource(key: "timePicker.title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Період прийому
      static let reminderInfoReceptionPeriodTitle = Rswift.StringResource(key: "reminderInfo.receptionPeriod.title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Початок
      static let reminderInfoStartPeriodTitle = Rswift.StringResource(key: "reminderInfo.startPeriod.title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Продовжити
      static let commonNextTitle = Rswift.StringResource(key: "common.next.title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Підтвердити
      static let commonAcceptTitle = Rswift.StringResource(key: "common.accept.title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Разова доза
      static let pillInfoSingleDoseTitle = Rswift.StringResource(key: "pillInfo.singleDose.title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Розчин
      static let drugFormSolutionTitle = Rswift.StringResource(key: "drugForm.solution.title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Розширені параметри
      static let reminderInfoExtensionParametersTitle = Rswift.StringResource(key: "reminderInfo.extensionParameters.title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Саше
      static let drugFormSachetTitle = Rswift.StringResource(key: "drugForm.sachet.title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Свічка
      static let drugFormSuppositoryTitle = Rswift.StringResource(key: "drugForm.suppository.title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Скiльки разiв на день?
      static let reminderInfoCountQuestionTitle = Rswift.StringResource(key: "reminderInfo.countQuestion.title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Список  медикаментів порожній
      static let reminderListPlaceholderTitle = Rswift.StringResource(key: "reminderList.placeholder.title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Спрей
      static let drugFormSprayTitle = Rswift.StringResource(key: "drugForm.spray.title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Створення нагадування
      static let createReminderNavigationTitle = Rswift.StringResource(key: "createReminder.navigation.title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Створити
      static let commonCreateTitle = Rswift.StringResource(key: "common.create.title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Сьогодні
      static let commonTodayTitle = Rswift.StringResource(key: "common.today.title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Таблетка
      static let drugFormTabletTitle = Rswift.StringResource(key: "drugForm.tablet.title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Форма
      static let pillInfoFormTitle = Rswift.StringResource(key: "pillInfo.form.title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Цикли
      static let reminderInfoCyclesTitle = Rswift.StringResource(key: "reminderInfo.cycles.title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Щоб додати новий медикамент, натисніть кнопку "Додати нагадування".
      static let reminderListPlaceholderSubtitle = Rswift.StringResource(key: "reminderList.placeholder.subtitle", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Як часто приймаєш?
      static let reminderInfoDailyPillsTitle = Rswift.StringResource(key: "reminderInfo.dailyPills.title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Який медикамент ви хочете додати?
      static let pillInfoNameTitle = Rswift.StringResource(key: "pillInfo.name.title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: на день
      static let reminderInfoByDayTitle = Rswift.StringResource(key: "reminderInfo.byDay.title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: раз
      static let stringBuilderCount = Rswift.StringResource(key: "stringBuilder.count", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)

      /// Value: Ін'єкція
      static func drugFormInjectionTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("drugForm.injection.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "drugForm.injection.title"
        }

        return NSLocalizedString("drugForm.injection.title", bundle: bundle, comment: "")
      }

      /// Value: Інгалятор
      static func drugFormInhalerTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("drugForm.inhaler.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "drugForm.inhaler.title"
        }

        return NSLocalizedString("drugForm.inhaler.title", bundle: bundle, comment: "")
      }

      /// Value: Відмінити
      static func commonCancelTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("common.cancel.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "common.cancel.title"
        }

        return NSLocalizedString("common.cancel.title", bundle: bundle, comment: "")
      }

      /// Value: Для відправки фотографій потрібний доступ до Вашої бібліотеки фото
      static func pillInfoChangePhotoSubtitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("pillInfo.changePhoto.subtitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "pillInfo.changePhoto.subtitle"
        }

        return NSLocalizedString("pillInfo.changePhoto.subtitle", bundle: bundle, comment: "")
      }

      /// Value: Дні тижня
      static func reminderInfoDaysTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("reminderInfo.days.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "reminderInfo.days.title"
        }

        return NSLocalizedString("reminderInfo.days.title", bundle: bundle, comment: "")
      }

      /// Value: Днів
      static func reminderInfoDaysPeriodTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("reminderInfo.daysPeriod.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "reminderInfo.daysPeriod.title"
        }

        return NSLocalizedString("reminderInfo.daysPeriod.title", bundle: bundle, comment: "")
      }

      /// Value: Додати нагадування
      static func reminderListProceedButtonTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("reminderList.proceedButton.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "reminderList.proceedButton.title"
        }

        return NSLocalizedString("reminderList.proceedButton.title", bundle: bundle, comment: "")
      }

      /// Value: Доступ до Фото
      static func pillInfoChangePhotoTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("pillInfo.changePhoto.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "pillInfo.changePhoto.title"
        }

        return NSLocalizedString("pillInfo.changePhoto.title", bundle: bundle, comment: "")
      }

      /// Value: Завантажити фото
      static func pillInfoLoadPhotoButtonTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("pillInfo.loadPhotoButton.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "pillInfo.loadPhotoButton.title"
        }

        return NSLocalizedString("pillInfo.loadPhotoButton.title", bundle: bundle, comment: "")
      }

      /// Value: Зробити фото
      static func pillInfoMakePhotoButtonTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("pillInfo.makePhotoButton.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "pillInfo.makePhotoButton.title"
        }

        return NSLocalizedString("pillInfo.makePhotoButton.title", bundle: bundle, comment: "")
      }

      /// Value: Зробити фото
      static func pillInfoMakePhotoTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("pillInfo.makePhoto.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "pillInfo.makePhoto.title"
        }

        return NSLocalizedString("pillInfo.makePhoto.title", bundle: bundle, comment: "")
      }

      /// Value: Капсула
      static func drugFormCapsuleTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("drugForm.capsule.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "drugForm.capsule.title"
        }

        return NSLocalizedString("drugForm.capsule.title", bundle: bundle, comment: "")
      }

      /// Value: Краплі
      static func drugFormDropsTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("drugForm.drops.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "drugForm.drops.title"
        }

        return NSLocalizedString("drugForm.drops.title", bundle: bundle, comment: "")
      }

      /// Value: Кінець
      static func reminderInfoEndPeriodTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("reminderInfo.endPeriod.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "reminderInfo.endPeriod.title"
        }

        return NSLocalizedString("reminderInfo.endPeriod.title", bundle: bundle, comment: "")
      }

      /// Value: Мазь/гель
      static func drugFormGelTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("drugForm.gel.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "drugForm.gel.title"
        }

        return NSLocalizedString("drugForm.gel.title", bundle: bundle, comment: "")
      }

      /// Value: Налаштування
      static func commonSettingsTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("common.settings.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "common.settings.title"
        }

        return NSLocalizedString("common.settings.title", bundle: bundle, comment: "")
      }

      /// Value: Оберіть розклад прийому
      static func reminderInfoScheduleTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("reminderInfo.schedule.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "reminderInfo.schedule.title"
        }

        return NSLocalizedString("reminderInfo.schedule.title", bundle: bundle, comment: "")
      }

      /// Value: Оберіть час
      static func timePickerTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("timePicker.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "timePicker.title"
        }

        return NSLocalizedString("timePicker.title", bundle: bundle, comment: "")
      }

      /// Value: Період прийому
      static func reminderInfoReceptionPeriodTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("reminderInfo.receptionPeriod.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "reminderInfo.receptionPeriod.title"
        }

        return NSLocalizedString("reminderInfo.receptionPeriod.title", bundle: bundle, comment: "")
      }

      /// Value: Початок
      static func reminderInfoStartPeriodTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("reminderInfo.startPeriod.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "reminderInfo.startPeriod.title"
        }

        return NSLocalizedString("reminderInfo.startPeriod.title", bundle: bundle, comment: "")
      }

      /// Value: Продовжити
      static func commonNextTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("common.next.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "common.next.title"
        }

        return NSLocalizedString("common.next.title", bundle: bundle, comment: "")
      }

      /// Value: Підтвердити
      static func commonAcceptTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("common.accept.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "common.accept.title"
        }

        return NSLocalizedString("common.accept.title", bundle: bundle, comment: "")
      }

      /// Value: Разова доза
      static func pillInfoSingleDoseTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("pillInfo.singleDose.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "pillInfo.singleDose.title"
        }

        return NSLocalizedString("pillInfo.singleDose.title", bundle: bundle, comment: "")
      }

      /// Value: Розчин
      static func drugFormSolutionTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("drugForm.solution.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "drugForm.solution.title"
        }

        return NSLocalizedString("drugForm.solution.title", bundle: bundle, comment: "")
      }

      /// Value: Розширені параметри
      static func reminderInfoExtensionParametersTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("reminderInfo.extensionParameters.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "reminderInfo.extensionParameters.title"
        }

        return NSLocalizedString("reminderInfo.extensionParameters.title", bundle: bundle, comment: "")
      }

      /// Value: Саше
      static func drugFormSachetTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("drugForm.sachet.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "drugForm.sachet.title"
        }

        return NSLocalizedString("drugForm.sachet.title", bundle: bundle, comment: "")
      }

      /// Value: Свічка
      static func drugFormSuppositoryTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("drugForm.suppository.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "drugForm.suppository.title"
        }

        return NSLocalizedString("drugForm.suppository.title", bundle: bundle, comment: "")
      }

      /// Value: Скiльки разiв на день?
      static func reminderInfoCountQuestionTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("reminderInfo.countQuestion.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "reminderInfo.countQuestion.title"
        }

        return NSLocalizedString("reminderInfo.countQuestion.title", bundle: bundle, comment: "")
      }

      /// Value: Список  медикаментів порожній
      static func reminderListPlaceholderTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("reminderList.placeholder.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "reminderList.placeholder.title"
        }

        return NSLocalizedString("reminderList.placeholder.title", bundle: bundle, comment: "")
      }

      /// Value: Спрей
      static func drugFormSprayTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("drugForm.spray.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "drugForm.spray.title"
        }

        return NSLocalizedString("drugForm.spray.title", bundle: bundle, comment: "")
      }

      /// Value: Створення нагадування
      static func createReminderNavigationTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("createReminder.navigation.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "createReminder.navigation.title"
        }

        return NSLocalizedString("createReminder.navigation.title", bundle: bundle, comment: "")
      }

      /// Value: Створити
      static func commonCreateTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("common.create.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "common.create.title"
        }

        return NSLocalizedString("common.create.title", bundle: bundle, comment: "")
      }

      /// Value: Сьогодні
      static func commonTodayTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("common.today.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "common.today.title"
        }

        return NSLocalizedString("common.today.title", bundle: bundle, comment: "")
      }

      /// Value: Таблетка
      static func drugFormTabletTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("drugForm.tablet.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "drugForm.tablet.title"
        }

        return NSLocalizedString("drugForm.tablet.title", bundle: bundle, comment: "")
      }

      /// Value: Форма
      static func pillInfoFormTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("pillInfo.form.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "pillInfo.form.title"
        }

        return NSLocalizedString("pillInfo.form.title", bundle: bundle, comment: "")
      }

      /// Value: Цикли
      static func reminderInfoCyclesTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("reminderInfo.cycles.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "reminderInfo.cycles.title"
        }

        return NSLocalizedString("reminderInfo.cycles.title", bundle: bundle, comment: "")
      }

      /// Value: Щоб додати новий медикамент, натисніть кнопку "Додати нагадування".
      static func reminderListPlaceholderSubtitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("reminderList.placeholder.subtitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "reminderList.placeholder.subtitle"
        }

        return NSLocalizedString("reminderList.placeholder.subtitle", bundle: bundle, comment: "")
      }

      /// Value: Як часто приймаєш?
      static func reminderInfoDailyPillsTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("reminderInfo.dailyPills.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "reminderInfo.dailyPills.title"
        }

        return NSLocalizedString("reminderInfo.dailyPills.title", bundle: bundle, comment: "")
      }

      /// Value: Який медикамент ви хочете додати?
      static func pillInfoNameTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("pillInfo.name.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "pillInfo.name.title"
        }

        return NSLocalizedString("pillInfo.name.title", bundle: bundle, comment: "")
      }

      /// Value: на день
      static func reminderInfoByDayTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("reminderInfo.byDay.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "reminderInfo.byDay.title"
        }

        return NSLocalizedString("reminderInfo.byDay.title", bundle: bundle, comment: "")
      }

      /// Value: раз
      static func stringBuilderCount(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("stringBuilder.count", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "stringBuilder.count"
        }

        return NSLocalizedString("stringBuilder.count", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
